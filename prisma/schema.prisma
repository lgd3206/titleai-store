// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  
  // 会员相关
  planType            String   @default("free")
  stripeCustomerId    String?  @unique
  subscriptionId      String?
  subscriptionStatus  String?
  subscriptionEnds    DateTime?
  
  // 使用统计
  usageCount     Int      @default(0)
  dailyUsage     Int      @default(0)
  lastUsageDate  DateTime?
  
  // 用户偏好设置
  preferences    Json?
  timezone       String   @default("Asia/Shanghai")
  language       String   @default("zh-CN")
  
  // 时间戳
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  accounts    Account[]
  sessions    Session[]
  titles      Title[]
  userTags    UserTag[]
  bookmarks   Bookmark[]
  collections Collection[]
  analytics   Analytics[]

  @@index([email])
  @@index([planType])
  @@index([createdAt])
}

model Title {
  id          String   @id @default(cuid())
  userId      String
  
  // 核心内容
  content     String[]
  topic       String
  samples     String   @db.Text
  
  // 分类和标签
  category    String?
  tags        String[]
  
  // 质量和统计
  quality     Float?   @default(0.0)
  usage       Int      @default(0)
  
  // 收藏状态
  isBookmarked Boolean @default(false)
  
  // AI生成相关
  model       String?
  temperature Float?
  prompt      String?  @db.Text
  
  // 元数据
  metadata    Json?
  
  // 时间戳
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookmarks   Bookmark[]
  analytics   Analytics[]

  @@index([userId])
  @@index([createdAt])
  @@index([category])
  @@index([quality])
  @@index([userId, createdAt])
}

model UserTag {
  id          String   @id @default(cuid())
  userId      String
  name        String
  color       String   @default("#3B82F6")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId])
}

model Collection {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  color       String   @default("#3B82F6")
  isDefault   Boolean  @default(false)
  isPrivate   Boolean  @default(true)
  sortOrder   Int      @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookmarks Bookmark[]

  @@index([userId])
  @@index([userId, sortOrder])
}

model Bookmark {
  id           String   @id @default(cuid())
  userId       String
  titleId      String
  collectionId String?
  
  note         String?  @db.Text
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  title      Title       @relation(fields: [titleId], references: [id], onDelete: Cascade)
  collection Collection? @relation(fields: [collectionId], references: [id], onDelete: SetNull)

  @@unique([userId, titleId])
  @@index([userId])
  @@index([titleId])
  @@index([collectionId])
}

model Analytics {
  id        String   @id @default(cuid())
  userId    String?
  titleId   String?
  
  event     String
  source    String?
  
  metadata  Json?
  userAgent String?
  ip        String?
  
  createdAt DateTime @default(now())

  user  User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  title Title? @relation(fields: [titleId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([event])
  @@index([createdAt])
  @@index([userId, event, createdAt])
}

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  category  String   @default("general")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
}

model Cache {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  expiresAt DateTime
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([expiresAt])
}