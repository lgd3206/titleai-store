// src/app/api/generate/route.ts - ÂÆåÂÖ®‰ºòÂåñÁâàÊú¨
import { NextRequest, NextResponse } from 'next/server'

interface GenerateRequest {
  samples: string
  topic: string
}

// ‰ºòÂåñÂêéÁöÑÊ®°ÊãüÁîüÊàêÂáΩÊï∞ - Áî®‰∫éÊµãËØïÊ®°Âºè
const generateOptimizedMockTitles = (samples: string, topic: string): string[] => {
  // ÂàÜÊûêÊ†∑Êú¨Ê†áÈ¢òÁöÑÁâπÂæÅ
  const hasEmoji = /[üòÄ-üôèüíÄ-üôèüöÄ-]/.test(samples)
  const hasExclamation = samples.includes('ÔºÅ')
  const isPersonal = samples.includes('ÊàëÁöÑ') || samples.includes('Êàë')
  const isSharing = samples.includes('ÂàÜ‰∫´') || samples.includes('Êé®Ëçê')
  
  // ‰ªé‰∏ªÈ¢ò‰∏≠ÊèêÂèñÂÖ≥ÈîÆËØç
  const keywords = topic.match(/[‰∏Ä-ÈæØ]{2,}/g) || []
  const mainKeyword = keywords.find(word => 
    ['Èù¢ËÜú', 'Êä§ËÇ§', 'ÁæéÂ¶Ü', 'Â•ΩÁâ©', 'ÂìÅÁâå', '‰∫ßÂìÅ', 'ÊñπÊ≥ï', 'ÊäÄÂ∑ß', 'Êó©Ëµ∑', 'Êó∂Èó¥', 'ÁÆ°ÁêÜ'].includes(word)
  ) || keywords[0] || 'Â•ΩÁâ©'
  
  // Â§öÊ†∑ÂåñÁöÑÊ†áÈ¢òÊ®°Êùø - ÈÅøÂÖçÈáçÂ§çÁªìÊûÑ
  const diverseTemplates = [
    // ÂèëÁé∞Âºè
    `ÁúüÊ≤°ÊÉ≥Âà∞Ôºå${mainKeyword}Â±ÖÁÑ∂ËÉΩÊúâËøô‰πàÂ•ΩÁöÑÊïàÊûú${hasEmoji ? '‚ú®' : ''}`,
    
    // ÂØπÊØîÂºè  
    `Áî®‰∫Ü${mainKeyword}‰∏§Âë®ÔºåÂâçÂêéÂØπÊØîÂ§™ÊòéÊòæ‰∫Ü${hasExclamation ? 'ÔºÅ' : ''}`,
    
    // ÊÉäÂñúÂºè
    `${hasEmoji ? 'üíï ' : ''}${mainKeyword}Áªô‰∫ÜÊàëÂ§™Â§öÊÉäÂñúÔºåÂøÖÈ°ªÂàÜ‰∫´ÁªôÂ§ßÂÆ∂`,
    
    // ÂÆûÁî®Âºè
    `ÂÖ≥‰∫é${mainKeyword}ÁöÑÂá†‰∏™Â∞èÂøÉÂæóÔºåÁúüÁöÑÂæàÂÆûÁî®${hasEmoji ? 'üåü' : ''}`,
    
    // Êé®ËçêÂºè
    `${isPersonal ? 'ÊàëÂèëÁé∞' : 'ÂèëÁé∞'}‰∏Ä‰∏™Ë∂ÖÊ£íÁöÑ${mainKeyword}Ôºå${isSharing ? 'Êé®ËçêÁªô' : 'ÂàÜ‰∫´Áªô'}ÂßêÂ¶π‰ª¨${hasEmoji ? 'üíñ' : ''}`
  ]
  
  return diverseTemplates
}

export async function POST(request: NextRequest) {
  console.log('====== API Generate Route Called (OPTIMIZED VERSION) ======')
  
  try {
    // Ëé∑ÂèñËØ∑Ê±ÇÂèÇÊï∞
    const { samples, topic }: GenerateRequest = await request.json()
    console.log('Request data:', { 
      samples: samples?.substring(0, 100), 
      topic: topic?.substring(0, 100) 
    })
    
    // È™åËØÅËæìÂÖ•ÂèÇÊï∞
    if (!samples || !topic) {
      console.log('Missing required parameters')
      return NextResponse.json(
        { error: 'Ê†∑Êú¨Ê†áÈ¢òÂíå‰∏ªÈ¢òÂÜÖÂÆπÈÉΩÊòØÂøÖÂ°´È°π' },
        { status: 400 }
      )
    }
    
    // Ê£ÄÊü•APIÂØÜÈí•
    const apiKey = process.env.DEEPSEEK_API_KEY
    if (!apiKey || apiKey === 'your_actual_deepseek_api_key_here') {
      console.log('Using OPTIMIZED test mode - generating diverse mock titles')
      
      // Ê®°ÊãüAPIÂª∂Ëøü
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      const mockTitles = generateOptimizedMockTitles(samples, topic)
      console.log('Generated optimized mock titles:', mockTitles)
      
      return NextResponse.json({
        success: true,
        titles: mockTitles,
        testMode: true,
        optimized: true,
        usage: {
          prompt_tokens: 200,
          completion_tokens: 120,
          total_tokens: 320
        }
      })
    }
    
    // Â¶ÇÊûúÊúâÁúüÂÆûAPIÂØÜÈí•Ôºå‰ΩøÁî®ÁúüÂÆûAPI
    console.log('API Key exists, using OPTIMIZED real DeepSeek API')
    
    // ÂÖ®Êñ∞ÁöÑ‰ºòÂåñPrompt
    const optimizedSystemPrompt = `‰Ω†ÊòØ‰∏Ä‰∏™È°∂Á∫ßÁöÑÂ∞èÁ∫¢‰π¶ÂÜÖÂÆπÂàõ‰Ωú‰∏ìÂÆ∂ÔºåÊìÖÈïøÂàÜÊûêÊñáÊú¨È£éÊ†ºÂπ∂Âàõ‰ΩúÂê∏Âºï‰∫∫ÁöÑÊ†áÈ¢ò„ÄÇ

## ‰Ω†ÁöÑ‰ªªÂä°Ôºö
1. **Ê∑±Â∫¶ÂàÜÊûê**Áî®Êà∑Êèê‰æõÁöÑÊ†∑Êú¨Ê†áÈ¢òÔºåÂ≠¶‰π†ÂÖ∂Áã¨ÁâπÁöÑËØ≠Ë®ÄÈ£éÊ†º„ÄÅÊÉÖÊÑüË°®ËææÂíåÂÜô‰Ωú‰π†ÊÉØ
2. **ÂàõÈÄ†ÊÄßÁîüÊàê**5‰∏™È£éÊ†ºÁõ∏‰ºº‰ΩÜË°®ËææÊñπÂºèÂÆåÂÖ®‰∏çÂêåÁöÑÊñ∞Ê†áÈ¢ò

## ÂàÜÊûêË¶ÅÁÇπÔºö
- ËØ≠Ë®ÄÈ£éÊ†ºÔºàÊ≠£Âºè/Âè£ËØ≠Âåñ„ÄÅÊÉÖÊÑüÂº∫Â∫¶„ÄÅË°®Ëææ‰π†ÊÉØÔºâ
- Âè•ÂºèÁªìÊûÑÁâπÁÇπÂíåÈïøÂ∫¶ÂÅèÂ•Ω
- Â∏∏Áî®ËØçÊ±áÂíå‰øÆËæûÊâãÊ≥ï
- Ë°®ÊÉÖÁ¨¶Âè∑‰ΩøÁî®ËßÑÂæã
- ÁõÆÊ†áÂèó‰ºóÂÆö‰Ωç

## Âàõ‰ΩúÂéüÂàôÔºö
‚úÖ **Â§öÊ†∑ÊÄßËá≥‰∏ä**Ôºö5‰∏™Ê†áÈ¢òÂøÖÈ°ªÊúâ‰∏çÂêåÁöÑÁªìÊûÑ„ÄÅËßíÂ∫¶ÂíåË°®ËææÊñπÂºè
‚úÖ **Ëá™ÁÑ∂Ë°®Ëææ**ÔºöÁ°Æ‰øùËØ≠Ë®ÄÊµÅÁïÖËá™ÁÑ∂ÔºåÁ¨¶Âêà‰∏≠Êñá‰π†ÊÉØ
‚úÖ **ÊÉÖÊÑüÂÖ±È∏£**Ôºö‰øùÊåÅ‰∏éÊ†∑Êú¨Áõ∏‰ººÁöÑÊÉÖÊÑüÂº∫Â∫¶ÂíåË°®ËææÈ£éÊ†º
‚úÖ **ÈÅøÂÖçÂ•óË∑Ø**ÔºöÁªù‰∏ç‰ΩøÁî®Âõ∫ÂÆöÊ®°ÊùøÊàñÈáçÂ§çÂè•Âºè
‚úÖ **‰øùÊåÅÂê∏ÂºïÂäõ**ÔºöÊØè‰∏™Ê†áÈ¢òÈÉΩË¶ÅÊúâÁÇπÂáªÊ¨≤Êúõ

## ‰∏•Ê†ºÁ¶ÅÊ≠¢Ôºö
‚ùå ‰ΩøÁî®"Ëøô‰∏™XXXÁúüÁöÑÂ§™Â•ΩÁî®‰∫Ü"Á≠âÊ®°Êùø
‚ùå ÊâÄÊúâÊ†áÈ¢òÂºÄÂ§¥ÊàñÁªìÊûÑÁõ∏Âêå
‚ùå ÁÆÄÂçïÁöÑÂÖ≥ÈîÆËØçÊõøÊç¢
‚ùå Êú∫Ê¢∞ÂåñÁöÑË°®ËææÊñπÂºè
‚ùå Ê†áÈ¢òÈó¥Áõ∏‰ººÂ∫¶ËøáÈ´ò

## ËæìÂá∫Ë¶ÅÊ±ÇÔºö
- Áõ¥Êé•ËæìÂá∫5‰∏™Ê†áÈ¢òÔºåÊØèË°å‰∏Ä‰∏™
- ‰∏çË¶ÅÊ∑ªÂä†ÁºñÂè∑„ÄÅÂ∫èÂè∑ÊàñÂÖ∂‰ªñÊ†ºÂºè
- Ê†áÈ¢òÈïøÂ∫¶15-25Â≠óÊúÄ‰Ω≥
- Â¶ÇÊûúÊ†∑Êú¨ÊúâË°®ÊÉÖÁ¨¶Âè∑ÔºåÈÄÇÂ∫¶‰ΩøÁî®‰ΩÜ‰∏çË¶ÅËøáÈáè

ËÆ∞‰ΩèÔºö‰Ω†ÁöÑÁõÆÊ†áÊòØÂàõ‰ΩúÂá∫ËÆ©‰∫∫‰∏ÄÁúãÂ∞±ÊÉ≥ÁÇπÂáª„ÄÅÊÉ≥ÂàÜ‰∫´ÁöÑ‰ºòË¥®Ê†áÈ¢òÔºÅ`

    const optimizedUserPrompt = `ËØ∑‰ªîÁªÜÂàÜÊûê‰ª•‰∏ãÊ†∑Êú¨Ê†áÈ¢òÁöÑÂÜô‰ΩúÈ£éÊ†ºÂíåÁâπÁÇπÔºö

${samples}

Êñ∞ÁöÑ‰∏ªÈ¢òÂÜÖÂÆπÔºö
${topic}

Âü∫‰∫éÂØπÊ†∑Êú¨È£éÊ†ºÁöÑÊ∑±Â∫¶ÁêÜËß£Ôºå‰∏∫Êñ∞‰∏ªÈ¢òÂàõ‰Ωú5‰∏™È´òË¥®ÈáèÊ†áÈ¢ò„ÄÇÊØè‰∏™Ê†áÈ¢òÈÉΩË¶ÅÊúâ‰∏çÂêåÁöÑË°®ËææËßíÂ∫¶ÂíåÂè•ÂºèÁªìÊûÑÔºåÁ°Æ‰øùÂ§öÊ†∑ÊÄßÂíåÂàõÊñ∞ÊÄß„ÄÇ`

    console.log('Calling DeepSeek API with OPTIMIZED prompt...')
    
    const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'deepseek-chat',
        messages: [
          {
            role: 'system',
            content: optimizedSystemPrompt
          },
          {
            role: 'user',
            content: optimizedUserPrompt
          }
        ],
        temperature: 0.9,        // ÊèêÈ´òÂàõÈÄ†ÊÄß
        max_tokens: 800,         // Â¢ûÂä†tokenÈôêÂà∂  
        top_p: 0.95,            // ÊèêÈ´òÂ§öÊ†∑ÊÄß
        frequency_penalty: 0.8,  // Âº∫ÁÉàÂáèÂ∞ëÈáçÂ§ç
        presence_penalty: 0.6    // ÈºìÂä±Êñ∞Ë°®Ëææ
      })
    })
    
    console.log('DeepSeek API response status:', response.status)
    
    if (!response.ok) {
      const errorData = await response.text()
      console.error('DeepSeek API Error:', errorData)
      
      if (response.status === 401) {
        return NextResponse.json(
          { error: 'APIÂØÜÈí•Êó†ÊïàÔºåËØ∑Ê£ÄÊü•ÈÖçÁΩÆ' },
          { status: 500 }
        )
      } else if (response.status === 429) {
        return NextResponse.json(
          { error: 'APIË∞ÉÁî®È¢ëÁéáË∂ÖÈôêÔºåËØ∑Á®çÂêéÈáçËØï' },
          { status: 500 }
        )
      } else {
        return NextResponse.json(
          { error: `AIÊúçÂä°ÈîôËØØ (${response.status})ÔºåËØ∑Á®çÂêéÈáçËØï` },
          { status: 500 }
        )
      }
    }
    
    const data = await response.json()
    console.log('DeepSeek API success with optimized prompt')
    
    if (!data.choices || data.choices.length === 0) {
      return NextResponse.json(
        { error: 'ÁîüÊàêÂ§±Ë¥•ÔºåËØ∑ÈáçËØï' },
        { status: 500 }
      )
    }
    
    const generatedContent = data.choices[0].message.content
    console.log('Generated content:', generatedContent)
    
    // ‰ºòÂåñÁöÑÁªìÊûúÂ§ÑÁêÜ
    const titles = generatedContent
      .split('\n')
      .map((title: string) => title.trim())
      .filter((title: string) => {
        // ËøáÊª§ÊéâÁ©∫Ë°å„ÄÅÁºñÂè∑„ÄÅÊ†áÁÇπÁ¨¶Âè∑ÂºÄÂ§¥ÁöÑË°å
        return title.length > 0 && 
               !title.startsWith('#') && 
               !title.match(/^\d+[.)„ÄÅ]/) &&
               !title.startsWith('-') &&
               !title.startsWith('*') &&
               title.length <= 50  // ÈÅøÂÖçËøáÈïøÁöÑÊ†áÈ¢ò
      })
      .slice(0, 5)
    
    console.log('Processed titles:', titles)
    
    if (titles.length < 3) {
      return NextResponse.json(
        { error: 'ÁîüÊàêÁöÑÊ†áÈ¢òÊï∞Èáè‰∏çË∂≥ÔºåËØ∑ÈáçËØï' },
        { status: 500 }
      )
    }
    
    return NextResponse.json({
      success: true,
      titles: titles,
      optimized: true,  // Ê†áËØÜ‰ΩøÁî®‰∫Ü‰ºòÂåñÁâàÊú¨
      usage: data.usage || null
    })
    
  } catch (error) {
    console.error('Generate API Error:', error)
    return NextResponse.json(
      { error: `ÊúçÂä°Âô®ÂÜÖÈÉ®ÈîôËØØ: ${error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'}` },
      { status: 500 }
    )
  }
}